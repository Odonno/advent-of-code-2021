fn main() {
    let input = "1,3,3,4,5,1,1,1,1,1,1,2,1,4,1,1,1,5,2,2,4,3,1,1,2,5,4,2,2,3,1,2,3,2,1,1,4,4,2,4,4,1,2,4,3,3,3,1,1,3,4,5,2,5,1,2,5,1,1,1,3,2,3,3,1,4,1,1,4,1,4,1,1,1,1,5,4,2,1,2,2,5,5,1,1,1,1,2,1,1,1,1,3,2,3,1,4,3,1,1,3,1,1,1,1,3,3,4,5,1,1,5,4,4,4,4,2,5,1,1,2,5,1,3,4,4,1,4,1,5,5,2,4,5,1,1,3,1,3,1,4,1,3,1,2,2,1,5,1,5,1,3,1,3,1,4,1,4,5,1,4,5,1,1,5,2,2,4,5,1,3,2,4,2,1,1,1,2,1,2,1,3,4,4,2,2,4,2,1,4,1,3,1,3,5,3,1,1,2,2,1,5,2,1,1,1,1,1,5,4,3,5,3,3,1,5,5,4,4,2,1,1,1,2,5,3,3,2,1,1,1,5,5,3,1,4,4,2,4,2,1,1,1,5,1,2,4,1,3,4,4,2,1,4,2,1,3,4,3,3,2,3,1,5,3,1,1,5,1,2,2,4,4,1,2,3,1,2,1,1,2,1,1,1,2,3,5,5,1,2,3,1,3,5,4,2,1,3,3,4";

    let number_of_days = 80;

    let mut fishes = input
        .split(",")
        .map(|x| {
            return Fish {
                value: x.parse::<i32>().unwrap(),
            };
        })
        .collect::<Vec<_>>();

    let mut next_turn_fishes = 0;

    for _ in 0..number_of_days {
        for fish in &mut fishes {
            if fish.value == 0 {
                fish.value = 6;
            } else {
                fish.value -= 1;
            }
        }

        for _ in 0..next_turn_fishes {
            fishes.push(Fish { value: 8 });
        }

        next_turn_fishes = fishes.iter().filter(|x| x.value == 0).count();
    }

    println!("Result: {}", fishes.len());
}

#[derive(Debug, Clone)]
struct Fish {
    value: i32,
}
